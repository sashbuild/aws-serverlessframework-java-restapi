package com.serverless;

import java.util.List;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

@DynamoDBTable(tableName = "employees-dev")
public class Employee
{
    private static final Logger LOG = LogManager.getLogger(Employee.class);

    static AmazonDynamoDB dynamoDBClient = AmazonDynamoDBClientBuilder.standard().build();
    private String id;
    private String name;
    private String department;

    @DynamoDBAutoGeneratedKey
    @DynamoDBHashKey(attributeName = "id")
    public String getId()
    {
        return id;
    }

    public void setId(String id)
    {
        this.id = id;
    }

    @DynamoDBRangeKey(attributeName = "name")
    public String getName()
    {
        return name;
    }

    public void setName(String name)
    {
        this.name = name;
    }

    @DynamoDBAttribute(attributeName = "department")
    public String getDepartment()
    {
        return department;
    }

    public void setDepartment(String department)
    {
        this.department = department;
    }

    public void create(Employee employee)
    {
        LOG.debug("Inside create employee");
        DynamoDBMapper dynamoDBMapper = new DynamoDBMapper(dynamoDBClient);
        dynamoDBMapper.save(employee);
        LOG.info("Saved employee: " + employee.toString());
    }

    public List<Employee> retrieveAll()
    {
        LOG.debug("Inside retrieveAll employees");
        DynamoDBMapper dynamoDBMapper = new DynamoDBMapper(dynamoDBClient);
        DynamoDBScanExpression dynamoDBScanExpression = new DynamoDBScanExpression();
        List<Employee> employeeList = dynamoDBMapper.scan(Employee.class, dynamoDBScanExpression);
        LOG.info("No of employees retrieved: " + employeeList.size());
        for (Employee employee : employeeList)
        {
            LOG.info(employee.toString());
        }
        return employeeList;
    }

    @Override
    public String toString()
    {
        return "Employee{" +
                "id='" + id + '\'' +
                ", name='" + name + '\'' +
                ", department='" + department + '\'' +
                '}';
    }
}
